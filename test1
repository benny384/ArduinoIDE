// #include <AFMotor.h>
#include <SoftwareSerial.h>
#include <NewPing.h>
#include <Dabble.h>

// Motoren
//AF_DCMotor motor1(0);  // Motor 1
//AF_DCMotor motor2(1);  // Motor 2
//AF_DCMotor motor3(3);  // Motor 3
//AF_DCMotor motor4(4);  // Motor 4

// Ultraschallsensoren
#define TRIGGER_PIN_FRONT 4
#define ECHO_PIN_FRONT 5
#define TRIGGER_PIN_LEFT 6
#define ECHO_PIN_LEFT 7
#define TRIGGER_PIN_RIGHT 8
#define ECHO_PIN_RIGHT 9

#define MAX_DISTANCE 10

NewPing sonarFront(TRIGGER_PIN_FRONT, ECHO_PIN_FRONT, MAX_DISTANCE);
NewPing sonarLeft(TRIGGER_PIN_LEFT, ECHO_PIN_LEFT, MAX_DISTANCE);
NewPing sonarRight(TRIGGER_PIN_RIGHT, ECHO_PIN_RIGHT, MAX_DISTANCE);

// LED Pins
#define LEFT_LED_PIN_1 10
#define LEFT_LED_PIN_2 11
#define RIGHT_LED_PIN_1 12
#define RIGHT_LED_PIN_2 13

// Blinkzeit für LEDs wenn Hindernis erkannt
#define BLINK_DURATION 5000  // 5 Sekunden

unsigned long blinkStartTime = 0;  // Startzeitpunkt des Blinkens = 0
bool blinkActive = false;  // Blink-Status = false

// Motoren Pins
int motor1Pin1 = 2;  // Motor 1, Pin 1
int motor1Pin2 = 3;  // Motor 1, Pin 2
int motor2Pin1 = 4;  // Motor 2, Pin 1
int motor2Pin2 = 5;  // Motor 2, Pin 2

void setup() {
  // Initialisierung der Motoren
  //motor1.setSpeed(255);  // Maximale Geschwindigkeit Motor 1
  //motor2.setSpeed(255);  // Maximale Geschwindigkeit Motor 2
  //motor3.setSpeed(255);  // Maximale Geschwindigkeit Motor 3
  //motor4.setSpeed(255);  // Maximale Geschwindigkeit Motor 4

  // Dabble-Bibliothek initialisieren
  Dabble.begin(BaudRate57600);

  // LED Pins als Ausgang festlegen
  pinMode(LEFT_LED_PIN_1, OUTPUT);
  pinMode(LEFT_LED_PIN_2, OUTPUT);
  pinMode(RIGHT_LED_PIN_1, OUTPUT);
  pinMode(RIGHT_LED_PIN_2, OUTPUT);
  
  // Serielle Kommunikation für Debugging
  Serial.begin(9600);

  // Motoren Pins als Ausgänge festlegen
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
}

void loop() {
  // Dabble-Befehle verarbeiten
  if (Dabble.isForward()) {
    // Vorwärts fahren
    forward();
    Serial.println("Vorwärts");
  } else if (Dabble.isBackward()) {
    // Rückwärts fahren
    backward();
    Serial.println("Rückwärts");
  } else if (Dabble.isLeft()) {
    // Links abbiegen
    left();
    Serial.println("Links");
    // LEDs blinken lassen (links) wenn man Links Fährt
    digitalWrite(LEFT_LED_PIN_1, HIGH);
    digitalWrite(LEFT_LED_PIN_2, LOW);
    digitalWrite(RIGHT_LED_PIN_1, LOW);
    digitalWrite(RIGHT_LED_PIN_2, LOW);
  } else if (Dabble.isRight()) {
    // Rechts abbiegen
    right();
    Serial.println("Rechts");
    // LEDs blinken lassen (rechts) wenn man Rechts Fährt
    digitalWrite(LEFT_LED_PIN_1, LOW);
    digitalWrite(LEFT_LED_PIN_2, LOW);
    digitalWrite(RIGHT_LED_PIN_1, HIGH);
    digitalWrite(RIGHT_LED_PIN_2, LOW);
  } else if (Dabble.isStop()) {
    // Anhalten 
    stop();
    Serial.println("Anhalten");
    // LEDs ausschalten
    digitalWrite(LEFT_LED_PIN_1, LOW);
    digitalWrite(LEFT_LED_PIN_2, LOW);
    digitalWrite(RIGHT_LED_PIN_1, LOW);
    digitalWrite(RIGHT_LED_PIN_2, LOW);
  }
  
  // Ultraschallsensoren auslesen
  int distanceFront = sonarFront.ping_cm();
  int distanceLeft = sonarLeft.ping_cm();
  int distanceRight = sonarRight.ping_cm();
  
  // Prüfen, ob Hindernis in Reichweite ist
  if (distanceFront < MAX_DISTANCE) {
    // Hindernis erkannt, anhalten
    stop();
    Serial.println("Hindernis erkannt, Anhalten");
    
    // LEDs blinken lassen wenn Hinderniss erkannt
    digitalWrite(LEFT_LED_PIN_1, HIGH);
    digitalWrite(LEFT_LED_PIN_2, HIGH);
    digitalWrite(RIGHT_LED_PIN_1, HIGH);
    digitalWrite(RIGHT_LED_PIN_2, HIGH);
    
    // Blinken für die definierte Zeit aktivieren
    blinkStartTime = millis();
    blinkActive = true;
  }
  
  // Blinken überprüfen und deaktivieren, wenn die Zeit abgelaufen ist
  if (blinkActive && millis() - blinkStartTime >= BLINK_DURATION) {
    digitalWrite(LEFT_LED_PIN_1, LOW);
    digitalWrite(LEFT_LED_PIN_2, LOW);
    digitalWrite(RIGHT_LED_PIN_1, LOW);
    digitalWrite(RIGHT_LED_PIN_2, LOW);
    
    blinkActive = false;
  }

  // Dabble-Aktualisierung durchführen
  Dabble.update();
}

void forward() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void backward() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void left() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void right() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void stop() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
}
