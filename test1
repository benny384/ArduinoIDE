#include <NewPing.h>
#include <Dabble.h>

// Motoren Pins
int motor1Pin = 2;  // Motor 1, Pin
int motor2Pin = 3;  // Motor 2, Pin
int motor3Pin = 4;  // Motor 3, Pin
int motor4Pin = 5;  // Motor 4, Pin

// Ultraschallsensoren
#define TRIGGER_PIN_FRONT 10
#define ECHO_PIN_FRONT 11
#define TRIGGER_PIN_LEFT 12
#define ECHO_PIN_LEFT 13
#define TRIGGER_PIN_RIGHT A0
#define ECHO_PIN_RIGHT A1

#define MAX_DISTANCE 10

NewPing sonarFront(TRIGGER_PIN_FRONT, ECHO_PIN_FRONT, MAX_DISTANCE);
NewPing sonarLeft(TRIGGER_PIN_LEFT, ECHO_PIN_LEFT, MAX_DISTANCE);
NewPing sonarRight(TRIGGER_PIN_RIGHT, ECHO_PIN_RIGHT, MAX_DISTANCE);

// LED Pin
#define LED_PIN A2

// Blinkzeit für LEDs wenn Hindernis erkannt
#define BLINK_DURATION 5000  // 5 Sekunden

unsigned long blinkStartTime = 0;  // Startzeitpunkt des Blinkens = 0
bool blinkActive = false;  // Blink-Status = false

void setup() {
  // Dabble-Bibliothek initialisieren
  Dabble.begin(9600);

  // LED Pin als Ausgang festlegen
  pinMode(LED_PIN, OUTPUT);

  // Serielle Kommunikation für Debugging
  Serial.begin(9600);

  // Motoren Pins als Ausgänge festlegen
  pinMode(motor1Pin, OUTPUT);
  pinMode(motor2Pin, OUTPUT);
  pinMode(motor3Pin, OUTPUT);
  pinMode(motor4Pin, OUTPUT);
}

void loop() {
  // Dabble-Befehle verarbeiten
  Dabble.processInput();

  // Gamepad-Eingaben verarbeiten
  if (GamePad.isUpPressed()) {
    forward();
  } else if (GamePad.isDownPressed()) {
    backward();
  } else if (GamePad.isRightPressed()) {
    right();
  } else if (GamePad.isLeftPressed()) {
    left();
  } else {
    stop();
  }

  // Ultraschallsensoren auslesen
  int distanceFront = sonarFront.ping_cm();
  int distanceLeft = sonarLeft.ping_cm();
  int distanceRight = sonarRight.ping_cm();
  
  // Prüfen, ob Hindernis in Reichweite ist
  if (distanceFront < MAX_DISTANCE) {
    // Hindernis erkannt, anhalten
    stop();
    Serial.println("Hindernis erkannt, Anhalten");
    
    // LED blinken lassen wenn Hindernis erkannt
    digitalWrite(LED_PIN, HIGH);
    
    // Blinken für die definierte Zeit aktivieren
    blinkStartTime = millis();
    blinkActive = true;
  }
  
  // Blinken überprüfen und deaktivieren, wenn die Zeit abgelaufen ist
  if (blinkActive && millis() - blinkStartTime >= BLINK_DURATION) {
    digitalWrite(LED_PIN, LOW);
    
    blinkActive = false;
  }
}

void forward() {
  digitalWrite(motor1Pin, HIGH);
  digitalWrite(motor2Pin, HIGH);
  digitalWrite(motor3Pin, HIGH);
  digitalWrite(motor4Pin, HIGH);
}

void backward() {
  digitalWrite(motor1Pin, LOW);
  digitalWrite(motor2Pin, HIGH);
  digitalWrite(motor3Pin, LOW);
  digitalWrite(motor4Pin, HIGH);
}

void right() {
  digitalWrite(motor1Pin, HIGH);
  digitalWrite(motor2Pin, LOW);
  digitalWrite(motor3Pin, LOW);
  digitalWrite(motor4Pin, HIGH);
}

void left() {
  digitalWrite(motor1Pin, LOW);
  digitalWrite(motor2Pin, HIGH);
  digitalWrite(motor3Pin, HIGH);
  digitalWrite(motor4Pin, LOW);
}

void stop() {
  digitalWrite(motor1Pin, LOW);
  digitalWrite(motor2Pin, LOW);
  digitalWrite(motor3Pin, LOW);
  digitalWrite(motor4Pin, LOW);
}
