#include <AFMotor.h>
#include <SoftwareSerial.h>
#include <NewPing.h>

// Motoren
AF_DCMotor motor1(1);  // Motor 1
AF_DCMotor motor2(2);  // Motor 2
AF_DCMotor motor3(3);  // Motor 3
AF_DCMotor motor4(4);  // Motor 4

SoftwareSerial bluetoothSerial(2, 3);  // RX, TX Pins des HC-06 Moduls | Bluetooth-Verbindung

// Ultraschallsensoren
#define TRIGGER_PIN_FRONT 4
#define ECHO_PIN_FRONT 5
#define TRIGGER_PIN_LEFT 6
#define ECHO_PIN_LEFT 7
#define TRIGGER_PIN_RIGHT 8
#define ECHO_PIN_RIGHT 9

#define MAX_DISTANCE 10

NewPing sonarFront(TRIGGER_PIN_FRONT, ECHO_PIN_FRONT, MAX_DISTANCE);
NewPing sonarLeft(TRIGGER_PIN_LEFT, ECHO_PIN_LEFT, MAX_DISTANCE);
NewPing sonarRight(TRIGGER_PIN_RIGHT, ECHO_PIN_RIGHT, MAX_DISTANCE);

// LED Pins
#define LEFT_LED_PIN_1 10
#define LEFT_LED_PIN_2 11
#define RIGHT_LED_PIN_1 12
#define RIGHT_LED_PIN_2 13

// Blinkzeit für LEDs wenn Hinderniss erkannt
#define BLINK_DURATION 5000  // 5 Sekunden

unsigned long blinkStartTime = 0;  // Startzeitpunkt des Blinkens = 0
bool blinkActive = false;  // Blink-Status = false

void setup() {
  // Initialisierung der Motoren
  motor1.setSpeed(255);  // Maximale Geschwindigkeit Motor 1
  motor2.setSpeed(255);  // Maximale Geschwindigkeit Motor 2
  motor3.setSpeed(255);  // Maximale Geschwindigkeit Motor 3
  motor4.setSpeed(255);  // Maximale Geschwindigkeit Motor 4

  // Bluetooth-Verbindung (Hoffe es geht)
  bluetoothSerial.begin(9600);
  
  // LED Pins als Ausgang festlegen
  pinMode(LEFT_LED_PIN_1, OUTPUT);
  pinMode(LEFT_LED_PIN_2, OUTPUT);
  pinMode(RIGHT_LED_PIN_1, OUTPUT);
  pinMode(RIGHT_LED_PIN_2, OUTPUT);
  
  // Serielle Kommunikation für Debugging
  Serial.begin(9600);
}

void loop() {
  // Befehle von der Bluetooth-Verbindung lesen
  while (bluetoothSerial.available()) {
    char command = bluetoothSerial.read();

    // Motoren steuern basierend auf dem empfangenen Befehl (F=Forward, B= Backward, L= Left, R= Right, S= Stop)
    if (command == 'F') {
      // Vorwärts fahren
      motor1.run(FORWARD);
      motor2.run(FORWARD);
      motor3.run(FORWARD);
      motor4.run(FORWARD);
      Serial.println("Vorwärts");
    } else if (command == 'B') {
      // Rückwärts fahren
      motor1.run(BACKWARD);
      motor2.run(BACKWARD);
      motor3.run(BACKWARD);
      motor4.run(BACKWARD);
      Serial.println("Rückwärts");
    } else if (command == 'L') {
      // Links abbiegen
      motor1.run(BACKWARD);
      motor2.run(BACKWARD);
      motor3.run(FORWARD);
      motor4.run(FORWARD);
      Serial.println("Links");
      // LEDs blinken lassen (links) wenn man Links Fährt
      digitalWrite(LEFT_LED_PIN_1, HIGH);
      digitalWrite(LEFT_LED_PIN_2, LOW);
      digitalWrite(RIGHT_LED_PIN_1, LOW);
      digitalWrite(RIGHT_LED_PIN_2, LOW);
    } else if (command == 'R') {
      // Rechts abbiegen
      motor1.run(FORWARD);
      motor2.run(FORWARD);
      motor3.run(BACKWARD);
      motor4.run(BACKWARD);
      Serial.println("Rechts");
      // LEDs blinken lassen (rechts) wenn man Rechts Fährt
      digitalWrite(LEFT_LED_PIN_1, LOW);
      digitalWrite(LEFT_LED_PIN_2, LOW);
      digitalWrite(RIGHT_LED_PIN_1, HIGH);
      digitalWrite(RIGHT_LED_PIN_2, LOW);
    } else if (command == 'S') {
      // Anhalten 
      motor1.run(RELEASE);
      motor2.run(RELEASE);
      motor3.run(RELEASE);
      motor4.run(RELEASE);
      Serial.println("Anhalten");
      // LEDs ausschalten
      digitalWrite(LEFT_LED_PIN_1, LOW);
      digitalWrite(LEFT_LED_PIN_2, LOW);
      digitalWrite(RIGHT_LED_PIN_1, LOW);
      digitalWrite(RIGHT_LED_PIN_2, LOW);
    }
  }
  
  // Ultraschallsensoren auslesen
  int distanceFront = sonarFront.ping_cm();
  int distanceLeft = sonarLeft.ping_cm();
  int distanceRight = sonarRight.ping_cm();
  
  // Prüfen, ob Hindernis in Reichweite ist
  if (distanceFront < MAX_DISTANCE) {
    // Hindernis erkannt, anhalten
    motor1.run(RELEASE);
    motor2.run(RELEASE);
    motor3.run(RELEASE);
    motor4.run(RELEASE);
    Serial.println("Hindernis erkannt, Anhalten");
    
    // LEDs blinken lassen wenn Hinderniss erkannt
    digitalWrite(LEFT_LED_PIN_1, HIGH);
    digitalWrite(LEFT_LED_PIN_2, HIGH);
    digitalWrite(RIGHT_LED_PIN_1, HIGH);
    digitalWrite(RIGHT_LED_PIN_2, HIGH);
    
    // Blinken für die definierte Zeit aktivieren
    blinkStartTime = millis();
    blinkActive = true;
  }
  
  // Blinken überprüfen und deaktivieren, wenn die Zeit abgelaufen ist
  if (blinkActive && millis() - blinkStartTime >= BLINK_DURATION) {
    digitalWrite(LEFT_LED_PIN_1, LOW);
    digitalWrite(LEFT_LED_PIN_2, LOW);
    digitalWrite(RIGHT_LED_PIN_1, LOW);
    digitalWrite(RIGHT_LED_PIN_2, LOW);
    
    blinkActive = false;
  }
}
